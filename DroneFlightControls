from pymavlink import mavutil
import time 

# Create the connection
def connect_to_drone(str):
    # Connect to the drone
    connection = mavutil.mavlink_connection(str) 
    # wait for the heartbeat message 
    msg = connection.recv_match(type='HEARTBEAT', blocking=True, timeout=10)

    if msg:
        print("Heartbeat received from system (ID: {})".format(msg.get_srcSystem()))
        return connection
    else:
        print("Connection failed: No heartbeat received.")
        return None


# Arm the drone, pass the connection and command. command can be 0 or 1 0: Disarm, 1: Arm
def arm_disarm_drone(connection, command):
    connection.mav.command_long_send(
        connection.target_system, 
        connection.target_component,
        mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM,
        0, 
        command, 0, 0, 0, 0, 0, 0)

    # Wait for the COMMAND_ACK message to be received
    msg = connection.recv_match(type='COMMAND_ACK', blocking=True)
    if not msg:
        print("No COMMAND_ACK message received")
    
    # Check if the command was successful
    if msg.command == mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM:
        if msg.result == mavutil.mavlink.MAV_RESULT_ACCEPTED:
            print("Arm/Disarm command acknowledged and executed")
            return True
        else:
            print(f"Arm/Disarm command failed with result: {msg.result}")
    else:
        print("Received COMMAND_ACK message with unexpected command type")
    return False
    

# Set the mode of the drone to GUIDED and hover the drone specifying altitude
def takeoff_drone(connection, altitude):
    connection.mav.command_long_send(
        connection.target_system, 
        connection.target_component,
        mavutil.mavlink.MAV_CMD_NAV_GUIDED_ENABLE,
        0, 
        1, 0, 0, 0, 0, 0, 0)
    
    # Wait for the COMMAND_ACK message to be received
    msg_guided = connection.recv_match(type='COMMAND_ACK', blocking=True)
    if not msg_guided or msg_guided.result != mavutil.mavlink.MAV_RESULT_ACCEPTED:
        print(f"Filed to set GUIDED mode: {msg_guided}")
        return False
    else:
        print("GUIDED mode set successfully")

    connection.mav.command_long_send(
        connection.target_system, 
        connection.target_component,
        mavutil.mavlink.MAV_CMD_NAV_TAKEOFF,
        0, 
        0, 0, 0, 0, 0, 0, altitude)

    msg_takeoff = connection.recv_match(type='COMMAND_ACK', blocking=True)
    if not msg_takeoff or msg_takeoff.result != mavutil.mavlink.MAV_RESULT_ACCEPTED:
        print(f"Filed to takeoff: {msg_takeoff}")
        return False
    else:
        print(f"Drone took off successfully with altitude: {altitude}m")
    
    return True

# move forward x meters
def move_forward(connection, x_distance):
    velocity = 1
    move_time = x_distance / velocity
    int type_mask = 0b0000111111000111
    # Command to move forward
    connection.mav.set_position_target_local_ned_send(
        0, connection.target_system,
        connection.target_component,
        mavutil.mavlink.MAV_FRAME_LOCAL_NED,type_mask, 0, 0, 0,  
        velocity, 
        0, 0, 0, 0, 0, 0, 0 ) 
    

    # Wait for the drone to move the desired distance
    time.sleep(move_time)

    connection.mav.set_position_target_local_ned_send(
        0, connection.target_system,
        connection.target_component,
        mavutil.mavlink.MAV_FRAME_LOCAL_NED,type_mask, 0, 0, 0,  
        0, 
        0, 0, 0, 0, 0, 0, 0) 

# move backward x meters
def move_backward(connection, x_distance):
    velocity = -1
    move_time = x_distance / abs(velocity)
    int type_mask = 0b0000111111000111
    # Command to move backward
    connection.mav.set_position_target_local_ned_send(
        0, connection.target_system,
        connection.target_component,
        mavutil.mavlink.MAV_FRAME_LOCAL_NED,type_mask, 0, 0, 0,  
        velocity, 
        0, 0, 0, 0, 0, 0, 0 ) 

    # Wait for the drone to move the desired distance
    time.sleep(move_time)

    connection.mav.set_position_target_local_ned_send(
        0, connection.target_system,
        connection.target_component,
        mavutil.mavlink.MAV_FRAME_LOCAL_NED,type_mask, 0, 0, 0,  
        0, 
        0, 0, 0, 0, 0, 0, 0 ) 

# move right y meters
def move_right(connection, y_distance):
    velocity = 1
    move_time = y_distance / velocity
    int type_mask = 0b0000111111000111
    # Command to move right
    connection.mav.set_position_target_local_ned_send(
        0, connection.target_system,
        connection.target_component,
        mavutil.mavlink.MAV_FRAME_LOCAL_NED,type_mask, 0, 0, 0,  
        0, 
        velocity, 0, 0, 0, 0, 0, 0 ) 

    # Wait for the drone to move the desired distance
    time.sleep(move_time)

    connection.mav.set_position_target_local_ned_send(
        0, connection.target_system,
        connection.target_component,
        mavutil.mavlink.MAV_FRAME_LOCAL_NED,type_mask, 0, 0, 0,  
        0, 
        0, 0, 0, 0, 0, 0, 0 ) 

def move_left(connection, y_distance):
    velocity = -1
    move_time = y_distance / abs(velocity)
    int type_mask = 0b0000111111000111
    # Command to move left
    connection.mav.set_position_target_local_ned_send(
        0, connection.target_system,
        connection.target_component,
        mavutil.mavlink.MAV_FRAME_LOCAL_NED,type_mask, 0, 0, 0,  
        0, 
        velocity, 0, 0, 0, 0, 0, 0 ) 

    # Wait for the drone to move the desired distance
    time.sleep(move_time)

    connection.mav.set_position_target_local_ned_send(
        0, connection.target_system,
        connection.target_component,
        mavutil.mavlink.MAV_FRAME_LOCAL_NED,type_mask, 0, 0, 0,  
        0, 
        0, 0, 0, 0, 0, 0, 0 ) 

def land_drone(connection):
    connection.mav.command_long_send(
        connection.target_system, 
        connection.target_component,
        mavutil.mavlink.MAV_CMD_NAV_LAND,
        0, 
        0, 0, 0, 0, 0, 0, 0)

    msg_land = connection.recv_match(type='COMMAND_ACK', blocking=True)
    if not msg_land or msg_land.result != mavutil.mavlink.MAV_RESULT_ACCEPTED:
        print(f"Filed to land: {msg_land}")
        return False
    else:
        print("Drone landed successfully")
        
def main():
    connection_string = 'tcp:127.0.0.1:5760'
    
    # Connect to the drone
    connection = connect_to_drone(connection_string)
    if not connection:
        print("Failed to connect to the drone.")
        return

    # Arm the drone
    if not arm_disarm_drone(connection, 1):
        print("Failed to arm the drone.")
        return
    
    # Take off to an altitude of 5 meters
    if not takeoff_drone(connection, 5):
        print("Failed to take off.")
        arm_disarm_drone(connection, 0)  # Attempt to disarm before exiting
        return

    # Sequentially move the drone according to the specified pattern
    if not move_forward(connection, 2):
        print("Failed to move forward.")
    
    if not move_right(connection, 2):
        print("Failed to move right.")
    
    if not move_backward(connection, 2):
        print("Failed to move backward.")
    
    if not move_left(connection, 2):
        print("Failed to move left.")

    # Land the drone
    if not land_drone(connection):
        print("Failed to land the drone.")
        return
    
    # Disarm the drone after landing
    if not arm_disarm_drone(connection, 0):
        print("Failed to disarm the drone.")

if __name__ == "__main__":
    main()


    




